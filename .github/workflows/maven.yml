name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  Analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Analyze with SonarCloud

        # You can pin the exact commit or the version.
        # uses: SonarSource/sonarcloud-github-action@v2.2.0
        uses: SonarSource/sonarcloud-github-action@4006f663ecaf1f8093e8e4abb9227f6041f52216
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        with:
          # Additional arguments for the SonarScanner CLI
          args:
            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
            # mandatory
            -Dsonar.projectKey=bloiko_video-streaming-api
            -Dsonar.organization=bloiko
            # Comma-separated paths to directories containing main source files.
            #-Dsonar.sources= # optional, default is project base directory
            # Comma-separated paths to directories containing test source files.
            #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
          # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
          #-Dsonar.verbose= # optional, default is false
          # When you need the analysis to take place in a directory other than the one from which it was launched, default is .
          projectBaseDir: .

  build:
    runs-on: ubuntu-latest
    needs: Analysis

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Format code
        run: mvn spotless:apply

      - name: Commit and push changes
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          if [[ `git status --porcelain` ]]; then
            git add .
            git commit -m "Apply code formatting"
            git push -f origin HEAD:${{ github.head_ref }}
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_TOKEN }}

      - name: Build with Maven
        run: mvn -B compile package --file pom.xml
  merge_pr:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GitHub CLI
        run: echo "${{ secrets.CUSTOM_TOKEN }}" > ~/.github_token

      - name: Merge Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_TOKEN }}
        run: |
          gh auth login --with-token < ~/.github_token
          gh pr merge ${{ github.event.pull_request.number }} --merge --auto --repo ${{ github.repository }}